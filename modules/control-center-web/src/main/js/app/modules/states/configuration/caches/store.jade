//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

- var model = 'backupItem'
- var form = 'writeBehind'

mixin checkbox(mdl, name, lbl, tip)
    ignite-form-field.checkbox
        ignite-form-field-input-checkbox(
            data-id='#{name}'
            data-name='#{name}'
            data-ng-model='#{mdl}.#{name}'
        )
        | #{lbl}
        ignite-form-field-tooltip
            | !{tip}

mixin text(mdl, name, lbl, tip, plc, req)
    ignite-form-field
        ignite-form-field-label
            | #{lbl}
        ignite-form-field-tooltip
            | !{tip}
        ignite-form-field-input-text(
            data-id='#{name}'
            data-name='#{name}'
            data-ng-model='#{mdl}.#{name}'
            data-placeholder='#{plc}'
            data-ng-required=req
        )

mixin number(mdl, name, lbl, enabled, plc, min, tip)
    ignite-form-field
        ignite-form-field-label
            | #{lbl}
        ignite-form-field-tooltip
            | !{tip}
        ignite-form-field-input-number(
            data-id='#{name}'
            data-name='#{name}'
            data-ng-model='#{mdl}.#{name}'
            data-ng-disabled='!#{enabled}'
            data-placeholder='#{plc}'
            data-min='#{min}'
        )

mixin dialect(mdl, name, lbl, tipTitle, genericName)
    ignite-form-field
        ignite-form-field-label
            | #{lbl}
        ignite-form-field-tooltip
            | #{tipTitle}
            ul: li #{genericName}
                li Oracle database
                li IBM DB2
                li Microsoft SQL Server
                li MySQL
                li PostgreSQL
                li H2 database
        ignite-form-field-dropdown(
            data-id='#{name}'
            data-name='#{name}'
            data-options='[\
                {value: "Generic", label: "#{genericName}"},\
                {value: "Oracle", label: "Oracle"},\
                {value: "DB2", label: "IBM DB2"},\
                {value: "SQLServer", label: "Microsoft SQL Server"},\
                {value: "MySQL", label: "MySQL"},\
                {value: "PostgreSQL", label: "PostgreSQL"},\
                {value: "H2", label: "H2 database"},\
                {value: undefined, label: "Not set"}\
            ]'
            data-ng-model='#{mdl}.dialect'
            data-ng-required='true'
        )

form.panel.panel-default(name='store' novalidate)
    .panel-heading(bs-collapse-toggle)
        ignite-form-panel-chevron
        label Store
        ignite-form-field-tooltip.tipLabel
            | Cache store settings
        ignite-form-revert
    .panel-collapse(role='tabpanel' bs-collapse-target id='store')
        .panel-body
            .col-sm-6
                .settings-row
                    -var storeFactory = model + '.cacheStoreFactory';
                    -var storeFactoryKind = storeFactory + '.kind';

                    ignite-form-field
                        ignite-form-field-label
                            | Store factory:
                        ignite-form-field-tooltip
                            | Factory for persistent storage for cache data
                        ignite-form-field-dropdown(
                            data-id='cacheStoreFactory'
                            data-name='cacheStoreFactory'
                            data-options='[\
                                {value: "CacheJdbcPojoStoreFactory", label: "JDBC POJO store factory"},\
                                {value: "CacheJdbcBlobStoreFactory", label: "JDBC BLOB store factory"},\
                                {value: "CacheHibernateBlobStoreFactory", label: "Hibernate BLOB store factory"},\
                                {value: undefined, label: "Not set"}\
                            ]'
                            data-ng-model='#{storeFactoryKind}'
                        )
                    span(ng-if='#{storeFactoryKind}')
                            a.customize(ng-show='__.expanded' ng-click='__.expanded = false') Hide settings
                            a.customize(ng-hide='__.expanded' ng-click='__.expanded = true') Show settings
                            .panel-details.col-sm-12(ng-if='__.expanded')
                                div(ng-if='#{storeFactoryKind} === "CacheJdbcPojoStoreFactory"')
                                    -var pojoStoreFactory = storeFactory + '.CacheJdbcPojoStoreFactory'

                                    .details-row
                                        +text(pojoStoreFactory, 'dataSourceBean', 'Data source bean name:', 'Name of the data source bean in Spring context', 'Bean name in Spring context', 'true')
                                    .details-row
                                        +dialect(pojoStoreFactory, 'pojoDialect', 'Dialect:', 'Dialect of SQL implemented by a particular RDBMS:', 'Generic JDBC dialect')
                                div(ng-if='#{storeFactoryKind} === "CacheJdbcBlobStoreFactory"')
                                    -var blobStoreFactory = storeFactory + '.CacheJdbcBlobStoreFactory'

                                    .details-row
                                        ignite-form-field
                                            ignite-form-field-label
                                                | Connect via:
                                            ignite-form-field-tooltip
                                                | You can connect to database via:
                                                ul: li JDBC URL, for example: jdbc:h2:mem:myDatabase
                                                    li Ð¡onfigured data source
                                            ignite-form-field-dropdown(
                                                data-id='connectVia'
                                                data-name='connectVia'
                                                data-options='[\
                                                    {value: "URL", label: "URL"},\
                                                    {value: "DataSource", label: "Data source"}\
                                                ]'
                                                data-ng-model='#{blobStoreFactory}.connectVia'
                                            )
                                    div(ng-if='#{blobStoreFactory}.connectVia === "URL"')
                                        .details-row
                                            +text(blobStoreFactory, 'connectionUrl', 'Connection URL:', 'URL for database access, for example: jdbc:h2:mem:myDatabase', 'Input URL', true)
                                        .details-row
                                            +text(blobStoreFactory, 'user', 'User:', 'User name for database access', 'Input user name', true)
                                        .details-row
                                            label Note, password will be generated as stub
                                    div(ng-if='#{blobStoreFactory}.connectVia !== "URL"')
                                        .details-row
                                            +text(blobStoreFactory, 'dataSourceBean', 'Data source bean name:', 'Name of the data source bean in Spring context', 'Bean name in Spring context', true)
                                        .details-row
                                            +dialect(blobStoreFactory, 'blobDialect', 'Dialect', 'Database:', 'Generic database')
                                    .details-row
                                        +checkbox(blobStoreFactory, 'initSchema', 'Init schema',
                                            'Flag indicating whether DB schema should be initialized by Ignite (default behaviour) or was explicitly created by user'
                                        )
                                div(ng-if='#{storeFactoryKind} === "CacheHibernateBlobStoreFactory"')
                                    .details-row
                .settings-row
                    +checkbox(model, 'storeKeepBinary', 'Keep binary in store', 'Flag indicating that CacheStore implementation is working with binary objects instead of Java objects')
                .settings-row
                    +checkbox(model, 'loadPreviousValue', 'Load previous value',
                        'Flag indicating whether value should be loaded from store if it is not in the cache for following cache operations: \
                        <ul> \
                        <li>IgniteCache.putIfAbsent()</li> \
                        <li>IgniteCache.replace()</li> \
                        <li>IgniteCache.replace()</li> \
                        <li>IgniteCache.remove()</li> \
                        <li>IgniteCache.getAndPut()</li> \
                        <li>IgniteCache.getAndRemove()</li> \
                        <li>IgniteCache.getAndReplace()</li> \
                        <li> IgniteCache.getAndPutIfAbsent()</li>\
                        </ul>'
                    )
                .settings-row
                    +checkbox(model, 'readThrough', 'Read-through', 'Flag indicating whether read-through caching should be used')
                .settings-row
                    +checkbox(model, 'writeThrough', 'Write-through', 'Flag indicating whether write-through caching should be used')
                .settings-row
                    ignite-form-group(ng-model='#{model}' ng-form='#{form}')
                        ignite-form-field-label
                            | Write behind
                        ignite-form-group-tooltip
                            | Cache write behind settings#[br]
                            | Write-behind is a special mode when updates to cache accumulated and then asynchronously flushed to persistent store as a bulk operation
                        .group-content
                            -var enabled = model + '.writeBehindEnabled'

                            .details-row
                                +checkbox(model, 'writeBehindEnabled', 'Enabled', 'Flag indicating whether Ignite should use write-behind behaviour for the cache store')
                            .details-row
                                +number(model, 'writeBehindBatchSize', 'Batch size:', enabled, '512', '1',
                                    'Maximum batch size for write - behind cache store operations<br/>\
                                     Store operations(get or remove) are combined in a batch of this size to be passed to cache store')
                            .details-row
                                +number(model, 'writeBehindFlushSize', 'Flush size:', enabled, '10240', '1',
                                    'Maximum size of the write-behind cache<br/>\
                                     If cache size exceeds this value, all cached items are flushed to the cache store and write cache is cleared')
                            .details-row
                                ignite-form-field
                                    ignite-form-field-label
                                        | Flush frequency:
                                    ignite-form-field-tooltip
                                        | Frequency with which write-behind cache is flushed to the cache store in milliseconds
                                    ignite-form-field-input-number(
                                        data-id='writeBehindFlushFrequency'
                                        data-name='writeBehindFlushFrequency'
                                        data-ng-model='#{model}.writeBehindFlushFrequency'
                                        data-ng-disabled='!#{model}.writeBehindEnabled'
                                        data-placeholder='5000'
                                        data-min='1'
                                    )
                            .details-row
                                ignite-form-field
                                    ignite-form-field-label
                                        | Flush threads count:
                                    ignite-form-field-tooltip
                                        | Number of threads that will perform cache flushing
                                    ignite-form-field-input-number(
                                        data-id='writeBehindFlushThreadCount'
                                        data-name='writeBehindFlushThreadCount'
                                        data-ng-model='#{model}.writeBehindFlushThreadCount'
                                        data-ng-disabled='!#{model}.writeBehindEnabled'
                                        data-placeholder='1'
                                        data-min='1'
                                    )
            ignite-ui-ace.col-sm-6
                .preview-panel(ng-init='mode = false')
                    .preview-legend
                        a(ng-class='{active: !mode, inactive: mode}' ng-click='mode = false') XML
                        | &nbsp;
                        a(ng-class='{active: mode, inactive: !mode}' ng-click='mode = true') Java
                    .preview-content(ng-if='mode')
                        ignite-ui-ace-java(data-cluster='backupItem' data-generator='cacheDomains' data-caches='caches')
                    .preview-content(ng-if='!mode')
                        ignite-ui-ace-xml(data-cluster='backupItem' data-generator='cacheDomains' data-caches='caches')
